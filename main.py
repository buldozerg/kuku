import json
import asyncio
import logging
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
import os

TOKEN = os.getenv("TOKEN")
TON_API_KEY = os.getenv("TON_API_KEY")
CHECK_TOKEN = os.getenv("CHECK_TOKEN")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")  # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_state = {}
last_total_balance = 0
last_user_balances = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open("users.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {"users": []}


def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª."""
    with open("users.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


async def get_wallet_balance(wallet: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö —á–µ—Ä–µ–∑ TON API"""
    url = f"https://tonapi.io/v2/accounts/{wallet}/jettons"
    headers = {"Authorization": f"Bearer {TON_API_KEY}"}

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            if response.status_code == 200:
                data = response.json()
                for jetton in data.get("balances", []):
                    if jetton["jetton"]["address"] == CHECK_TOKEN:
                        return int(jetton["balance"]) / (10 ** int(jetton["jetton"]["decimals"]))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

    return 0.0  # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0


async def check_password(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ."""
    if message.text != ADMIN_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return False
    return True


@dp.message(Command("add"))
async def add_user(message: Message):
    if not await check_password(message):
        return
    user_state[message.from_user.id] = 'waiting_for_nickname'
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")


@dp.message(Command("erase"))
async def erase_user(message: Message):
    if not await check_password(message):
        return
    user_state[message.from_user.id] = 'waiting_for_erase_nickname'
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —É–¥–∞–ª–∏—Ç—å:")


@dp.message(Command("check"))
async def check_users(message: Message):
    if not await check_password(message):
        return

    data = load_data()
    users = data["users"]
    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user in users:
        username = user["username"]
        wallet = user["wallet"]
        new_balance = await get_wallet_balance(wallet)
        change = new_balance - user["balance"]
        user["balance"] = new_balance  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        response += f"\nüîπ {username}\nüí≥ {wallet}\nüí∞ {new_balance} ({change:+.2f})\n"

    save_data(data)
    await message.answer(response)


@dp.message(Command("sum"))
async def sum_info(message: Message):
    global last_total_balance

    data = load_data()
    users = data["users"]

    count = len(users)
    total_balance = sum(user["balance"] for user in users)
    balance_change = total_balance - last_total_balance
    last_total_balance = total_balance  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

    await message.answer(
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance}\n"
        f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {balance_change:+.2f}"
    )


@dp.message(Command("list"))
async def list_users(message: Message):
    global last_user_balances

    data = load_data()
    users = data["users"]
    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ.")
        return

    response = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        username = user["username"]
        wallet = user["wallet"]

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        current_balance = await get_wallet_balance(wallet)

        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ /list
        previous_balance = last_user_balances.get(username, current_balance)
        balance_change = current_balance - previous_balance

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–ª–∞–Ω—Å–æ–≤
        last_user_balances[username] = current_balance

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        response += (
            f"üîπ {username}\n"
            f"üí≥ –ö–æ—à–µ–ª—ë–∫: {wallet}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å: {current_balance}\n"
            f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {balance_change:+.2f}\n\n"
        )

    await message.answer(response)


@dp.message()
async def process_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_id = message.from_user.id
    state = user_state.get(user_id)

    if state == 'waiting_for_nickname':
        user_state[user_id] = 'waiting_for_wallet'
        user_state[str(user_id) + '_nickname'] = message.text
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à TON-–∫–æ—à–µ–ª—ë–∫:")

    elif state == 'waiting_for_wallet':
        nickname = user_state.get(str(user_id) + '_nickname')
        wallet = message.text
        token_balance = await get_wallet_balance(wallet)

        data = load_data()
        user_found = False
        for user in data["users"]:
            if user["username"] == nickname:
                user["wallet"] = wallet
                user["balance"] = token_balance
                user_found = True
                break

        if not user_found:
            data["users"].append({
                "username": nickname,
                "wallet": wallet,
                "balance": token_balance
            })

        save_data(data)
        del user_state[user_id]

        await message.answer(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
            f"üîπ –ù–∏–∫: {nickname}\n"
            f"üí≥ –ö–æ—à–µ–ª—ë–∫: {wallet}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {token_balance}"
        )

    elif state == 'waiting_for_erase_nickname':
        username = message.text
        data = load_data()
        data["users"] = [user for user in data["users"] if user["username"] != username]
        save_data(data)
        del user_state[user_id]

        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
